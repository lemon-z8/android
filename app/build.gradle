group = 'com.taobao.android.atlasdemo'
version = getEnvValue("versionName", "1.0.0");
def apVersion = getEnvValue("apVersion", "");

apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'
apply plugin: 'com.taobao.atlas.dexpatch'
apply from: 'dexPatchWraper.gradle'

repositories {
    mavenLocal()
    jcenter()
}

android {
    compileSdkVersion 25
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.lemon.z8"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName version

        vectorDrawables.useSupportLibrary = true
        //通过增加判断逻辑，打出不同类型的定制包
        if (project.hasProperty("beta")) {
            buildConfigField "boolean", "API_ENV", "false"
        }else{
            buildConfigField "boolean", "API_ENV", "false"
        }
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ndk {
                abiFilters "x86","armeabi"
            }

        }
    }
}

atlas {

    atlasEnabled true
    tBuildConfig {
//        autoStartBundles = ['com.taobao.firstbundle'] //自启动bundle配置
        //远程调用
//        outOfApkBundles = ['remotebundle']
        //启动前调用
//        preLaunch = 'com.taobao.demo.DemoPreLaunch'
        classInject false
        //类似entity
//        dataBindingBundles = ['com.taobao.databindbundle']
    }

    manifestOptions {
        addAtlasProxyComponents true
    }


    patchConfigs {
        debug {
            createTPatch true
        }
    }


    buildTypes {
        debug {
            if (apVersion) {
                //基线版本坐标
                baseApDependency "com.taobao.android.atlasdemo:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile(rootProject.ext.lib_atlas_core) {

        transitive = true
    }

    //启动加载
//    compile project(':activitygroupcompat')
    //调用加载
    bundleCompile project(':modulea')

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile rootProject.ext.lib_atlas_update
    compile 'com.android.support:design:25.3.1'
    compile 'com.alibaba:fastjson:1.1.45.android@jar'
    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}

String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}